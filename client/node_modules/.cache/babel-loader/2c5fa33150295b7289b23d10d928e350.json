{"ast":null,"code":"var _jsxFileName = \"/Users/elhadinata/Desktop/20t1/COMP3900/submit/capstone-project-artemis/client/src/components/about/ReviewForm.jsx\";\nimport { Button, Card, Col, Form, Row } from 'react-bootstrap';\nimport React from 'react';\nimport { Requests } from 'src/utilities/Requests';\nimport StarRatings from 'react-star-ratings';\nimport { _ } from 'src/utilities/helper';\nexport const ARBITRARY_INDEX = 999999;\nexport class ReviewForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      await this.getEmail();\n    };\n\n    this.getEmail = async () => {\n      const sessionId = localStorage.getItem('sessionId');\n      const session = await Requests.getSession(sessionId);\n      const user = await Requests.getUser(session.user_id);\n      user && this.setState({\n        email: user.email\n      });\n    };\n\n    this.submitFeedback = async e => {\n      e.preventDefault();\n      const form = e.currentTarget;\n\n      if (form.checkValidity() === false || this.state.review === \"\") {\n        e.stopPropagation();\n        return;\n      }\n\n      let res;\n\n      if (_.isNil(this.state.email)) {\n        res = await Requests.postReview(\"Anonymous\", this.state.review, this.state.rating);\n      } else {\n        res = await Requests.postReview(this.state.email, this.state.review, this.state.rating);\n      }\n\n      let datetime = res.date_time.split(\" \");\n      let date = datetime[0];\n      let time = datetime[1].split('.');\n      const newDateTime = date + \"T\" + time[0];\n      const data = {\n        \"user\": this.state.email,\n        \"review\": this.state.review,\n        \"rating\": this.state.rating,\n        \"_id\": res._id,\n        \"date_time\": newDateTime\n      };\n      this.props.addReview(data);\n      this.setState({\n        review: \"\",\n        rating: 0\n      });\n    };\n\n    this.changeRating = rating => {\n      this.setState({\n        rating: rating\n      });\n    };\n\n    this.changeReview = event => {\n      this.setState({\n        review: event.target.value\n      });\n    };\n\n    this.state = {\n      email: \"\",\n      review: \"\",\n      rating: 0\n    };\n  }\n\n  render() {\n    return React.createElement(Row, {\n      key: ARBITRARY_INDEX,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Card, {\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.submitFeedback,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      controlId: \"exampleForm.ControlTextarea1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Share a feedback with us\"), React.createElement(Form.Control, {\n      as: \"textarea\",\n      rows: \"3\",\n      onChange: this.changeReview,\n      value: this.state.review,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })), React.createElement(StarRatings, {\n      className: \"star-ratings\",\n      rating: this.state.rating,\n      starRatedColor: \"yellow\",\n      starDimension: \"25px\",\n      changeRating: this.changeRating,\n      numberOfStars: 5,\n      name: \"rating\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Submit Feedback\"))))));\n  }\n\n}","map":{"version":3,"sources":["/Users/elhadinata/Desktop/20t1/COMP3900/submit/capstone-project-artemis/client/src/components/about/ReviewForm.jsx"],"names":["Button","Card","Col","Form","Row","React","Requests","StarRatings","_","ARBITRARY_INDEX","ReviewForm","Component","constructor","props","componentDidMount","getEmail","sessionId","localStorage","getItem","session","getSession","user","getUser","user_id","setState","email","submitFeedback","e","preventDefault","form","currentTarget","checkValidity","state","review","stopPropagation","res","isNil","postReview","rating","datetime","date_time","split","date","time","newDateTime","data","_id","addReview","changeRating","changeReview","event","target","value","render","width"],"mappings":";AAAA,SACIA,MADJ,EAEIC,IAFJ,EAGIC,GAHJ,EAIIC,IAJJ,EAKIC,GALJ,QAMO,iBANP;AAQA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,SAASC,CAAT,QAAkB,sBAAlB;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAxB;AACP,OAAO,MAAMC,UAAN,SAAyBL,KAAK,CAACM,SAA/B,CAAyC;AAE5CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SASnBC,iBATmB,GASC,YAAa;AAC7B,YAAM,KAAKC,QAAL,EAAN;AACH,KAXkB;;AAAA,SAYnBA,QAZmB,GAYR,YAAY;AACnB,YAAMC,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAlB;AACA,YAAMC,OAAO,GAAG,MAAMb,QAAQ,CAACc,UAAT,CAAoBJ,SAApB,CAAtB;AACA,YAAMK,IAAI,GAAG,MAAMf,QAAQ,CAACgB,OAAT,CAAiBH,OAAO,CAACI,OAAzB,CAAnB;AACAF,MAAAA,IAAI,IAAI,KAAKG,QAAL,CAAc;AAAEC,QAAAA,KAAK,EAAEJ,IAAI,CAACI;AAAd,OAAd,CAAR;AACH,KAjBkB;;AAAA,SAmBnBC,cAnBmB,GAmBF,MAAOC,CAAP,IAAa;AAC1BA,MAAAA,CAAC,CAACC,cAAF;AACA,YAAMC,IAAI,GAAGF,CAAC,CAACG,aAAf;;AACA,UAAID,IAAI,CAACE,aAAL,OAAyB,KAAzB,IAAkC,KAAKC,KAAL,CAAWC,MAAX,KAAsB,EAA5D,EAAgE;AAC5DN,QAAAA,CAAC,CAACO,eAAF;AACA;AACH;;AACD,UAAIC,GAAJ;;AACA,UAAG3B,CAAC,CAAC4B,KAAF,CAAQ,KAAKJ,KAAL,CAAWP,KAAnB,CAAH,EAA6B;AACzBU,QAAAA,GAAG,GAAG,MAAM7B,QAAQ,CAAC+B,UAAT,CAAoB,WAApB,EAAiC,KAAKL,KAAL,CAAWC,MAA5C,EAAoD,KAAKD,KAAL,CAAWM,MAA/D,CAAZ;AACH,OAFD,MAEO;AACHH,QAAAA,GAAG,GAAG,MAAM7B,QAAQ,CAAC+B,UAAT,CAAoB,KAAKL,KAAL,CAAWP,KAA/B,EAAsC,KAAKO,KAAL,CAAWC,MAAjD,EAAyD,KAAKD,KAAL,CAAWM,MAApE,CAAZ;AACH;;AAGD,UAAIC,QAAQ,GAAGJ,GAAG,CAACK,SAAJ,CAAcC,KAAd,CAAoB,GAApB,CAAf;AACA,UAAIC,IAAI,GAAGH,QAAQ,CAAC,CAAD,CAAnB;AACA,UAAII,IAAI,GAAGJ,QAAQ,CAAC,CAAD,CAAR,CAAYE,KAAZ,CAAkB,GAAlB,CAAX;AACA,YAAMG,WAAW,GAAGF,IAAI,GAAC,GAAL,GAASC,IAAI,CAAC,CAAD,CAAjC;AACA,YAAME,IAAI,GAAG;AACT,gBAAQ,KAAKb,KAAL,CAAWP,KADV;AAET,kBAAU,KAAKO,KAAL,CAAWC,MAFZ;AAGT,kBAAU,KAAKD,KAAL,CAAWM,MAHZ;AAIT,eAAOH,GAAG,CAACW,GAJF;AAKT,qBAAaF;AALJ,OAAb;AAOA,WAAK/B,KAAL,CAAWkC,SAAX,CAAqBF,IAArB;AACA,WAAKrB,QAAL,CAAc;AACVS,QAAAA,MAAM,EAAE,EADE;AAEVK,QAAAA,MAAM,EAAE;AAFE,OAAd;AAKH,KAnDkB;;AAAA,SAqDnBU,YArDmB,GAqDHV,MAAD,IAAY;AACvB,WAAKd,QAAL,CAAc;AAAEc,QAAAA,MAAM,EAAEA;AAAV,OAAd;AACH,KAvDkB;;AAAA,SAyDnBW,YAzDmB,GAyDHC,KAAD,IAAW;AACtB,WAAK1B,QAAL,CAAc;AAAES,QAAAA,MAAM,EAAEiB,KAAK,CAACC,MAAN,CAAaC;AAAvB,OAAd;AACH,KA3DkB;;AAEf,SAAKpB,KAAL,GAAa;AACTP,MAAAA,KAAK,EAAE,EADE;AAETQ,MAAAA,MAAM,EAAE,EAFC;AAGTK,MAAAA,MAAM,EAAE;AAHC,KAAb;AAKH;;AAsDDe,EAAAA,MAAM,GAAI;AACN,WACI,oBAAC,GAAD;AAAK,MAAA,GAAG,EAAE5C,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAE6C,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,QAAQ,EAAE,KAAK5B,cAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD,CAAM,KAAN;AAAY,MAAA,SAAS,EAAC,8BAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADJ,EAEI,oBAAC,IAAD,CAAM,OAAN;AAAc,MAAA,EAAE,EAAC,UAAjB;AAA4B,MAAA,IAAI,EAAC,GAAjC;AAAqC,MAAA,QAAQ,EAAE,KAAKuB,YAApD;AAAkE,MAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWC,MAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,EAKI,oBAAC,WAAD;AACI,MAAA,SAAS,EAAC,cADd;AAEI,MAAA,MAAM,EAAE,KAAKD,KAAL,CAAWM,MAFvB;AAGI,MAAA,cAAc,EAAC,QAHnB;AAII,MAAA,aAAa,EAAC,MAJlB;AAKI,MAAA,YAAY,EAAE,KAAKU,YALvB;AAMI,MAAA,aAAa,EAAE,CANnB;AAOI,MAAA,IAAI,EAAC,QAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,EAcI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdJ,EAeI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAA0B,MAAA,IAAI,EAAC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAfJ,CADJ,CADJ,CADJ,CADJ,CADJ;AA2BH;;AA3F2C","sourcesContent":["import {\n    Button,\n    Card,\n    Col,\n    Form,\n    Row\n} from 'react-bootstrap';\n\nimport React from 'react';\nimport { Requests } from 'src/utilities/Requests';\nimport StarRatings from 'react-star-ratings';\nimport { _ } from 'src/utilities/helper';\n\nexport const ARBITRARY_INDEX = 999999;\nexport class ReviewForm extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            email: \"\",\n            review: \"\",\n            rating: 0,\n        };\n    }\n\n    componentDidMount = async () =>  {\n        await this.getEmail();\n    }\n    getEmail = async () => {\n        const sessionId = localStorage.getItem('sessionId');\n        const session = await Requests.getSession(sessionId);\n        const user = await Requests.getUser(session.user_id);\n        user && this.setState({ email: user.email });\n    }\n\n    submitFeedback = async (e) => {\n        e.preventDefault();\n        const form = e.currentTarget;\n        if (form.checkValidity() === false || this.state.review === \"\") {\n            e.stopPropagation();\n            return;\n        }\n        let res;\n        if(_.isNil(this.state.email)){\n            res = await Requests.postReview(\"Anonymous\", this.state.review, this.state.rating);\n        } else {\n            res = await Requests.postReview(this.state.email, this.state.review, this.state.rating);\n        }\n        \n        \n        let datetime = res.date_time.split(\" \");\n        let date = datetime[0];\n        let time = datetime[1].split('.');\n        const newDateTime = date+\"T\"+time[0];\n        const data = {\n            \"user\": this.state.email,\n            \"review\": this.state.review,\n            \"rating\": this.state.rating,\n            \"_id\": res._id,\n            \"date_time\": newDateTime,\n        }\n        this.props.addReview(data);\n        this.setState({\n            review: \"\",\n            rating: 0,\n        })\n        \n    }\n\n    changeRating = (rating) => {\n        this.setState({ rating: rating });\n    }\n\n    changeReview = (event) => {\n        this.setState({ review: event.target.value });\n    }\n\n    render () {\n        return (\n            <Row key={ARBITRARY_INDEX}>\n                <Col>\n                    <Card style={{ width: '100%' }}>\n                        <Card.Body>\n                            <Form onSubmit={this.submitFeedback}>\n                                <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                                    <Form.Label>Share a feedback with us</Form.Label>\n                                    <Form.Control as=\"textarea\" rows=\"3\" onChange={this.changeReview} value={this.state.review}/>\n                                </Form.Group>\n                                <StarRatings\n                                    className=\"star-ratings\"\n                                    rating={this.state.rating}\n                                    starRatedColor=\"yellow\"\n                                    starDimension=\"25px\"\n                                    changeRating={this.changeRating}\n                                    numberOfStars={5}\n                                    name='rating'\n                                />\n                                <br/>\n                                <Button variant=\"primary\" type=\"submit\">Submit Feedback</Button>\n                            </Form>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}