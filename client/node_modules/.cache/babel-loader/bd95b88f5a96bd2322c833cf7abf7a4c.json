{"ast":null,"code":"var _jsxFileName = \"/Users/elhadinata/Desktop/20t1/COMP3900/submit/capstone-project-artemis/client/src/components/Dashboard.jsx\";\nimport 'src/styles/styles.css';\nimport 'react-tiny-fab/dist/styles.css';\nimport { Badge, Button, Modal, Nav, Navbar } from 'react-bootstrap';\nimport { faBars, faConciergeBell, faReceipt } from '@fortawesome/free-solid-svg-icons';\nimport { About } from 'src/components/about/About';\nimport { Checkout } from 'src/components/checkout/Checkout';\nimport { Fab } from 'react-tiny-fab';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { LoginDialog } from 'src/components/reservation/LoginDialog';\nimport { Menu } from 'src/components/menu/Menu';\nimport { NavOverlay } from 'src/components/NavOverlay';\nimport { Orders } from 'src/components/order/Orders';\nimport { Payment } from 'src/components/payment/Payment';\nimport { Profile } from 'src/components/profile/Profile';\nimport React from 'react';\nimport { Requests } from 'src/utilities/Requests';\nimport { Reservation } from 'src/components/reservation/Reservation';\nimport io from 'socket.io-client';\nexport const cartOps = {\n  ADD: 'add',\n  DELETE: 'delete',\n  UPDATE: 'update'\n};\nconst tabs = {\n  ALL: 'all',\n  ABOUT: 'about',\n  ORDERS: 'orders',\n  CHECKOUT: 'checkout',\n  RESERVATION: 'reservation',\n  PAYMENT: 'payment',\n  PROFILE: 'profile'\n};\nexport const orderStatus = {\n  ORDERED: 'Ordered',\n  PROGRESS: 'In Progress',\n  COMPLETED: 'Completed',\n  CANCELLED: 'Cancelled'\n};\nexport class Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setupSockets = () => {\n      this.socket.emit('customer_join', localStorage.getItem('tableId'));\n      this.socket.on('updateOrders', async () => {\n        // Update the status of the order that has been changed\n        try {\n          console.log('Order has been updated');\n          this.setState({\n            orderList: await this.getOrderList()\n          });\n        } catch (err) {\n          console.error(err);\n        }\n      });\n      this.socket.on('callWaiterToggled', () => {\n        this.handleCallWaiter(false);\n      });\n    };\n\n    this.getCurrentUser = async () => {\n      const sessionId = localStorage.getItem('sessionId');\n      const session = await Requests.getSession(sessionId);\n      const user = await Requests.getUser(session.user_id);\n\n      if (user) {\n        console.log('USER logged in');\n        this.setState({\n          loggedIn: true\n        });\n        return;\n      }\n    };\n\n    this.getOrderList = async () => {\n      const sessionId = localStorage.getItem('sessionId');\n\n      if (!sessionId) {\n        return [];\n      }\n\n      const session = await Requests.getSession(localStorage.getItem('sessionId'));\n      return session ? session.order_list : [];\n    };\n\n    this.itemInCart = menuItem => {\n      return this.state.cart.has(menuItem._id);\n    };\n\n    this.updateCart = (orderItem, operation) => {\n      let oldCart = this.state.cart;\n      let newCart = new Map(oldCart);\n\n      switch (operation) {\n        case cartOps.ADD || cartOps.UPDATE:\n          newCart.set(orderItem.menu_item._id, orderItem);\n          break;\n\n        case cartOps.DELETE:\n          newCart.delete(orderItem.menu_item._id);\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        cart: newCart\n      });\n    };\n\n    this.handleOpenCart = () => {\n      this.setState({\n        showCheckout: true\n      });\n    };\n\n    this.handleCloseCart = () => {\n      this.setState({\n        showCheckout: false\n      });\n    };\n\n    this.showLogin = () => {\n      this.setState({\n        showLoginDialog: true\n      });\n    };\n\n    this.handleNavSelect = event => {\n      if (event === 'logout') {\n        Requests.logout(localStorage.getItem('sessionId'));\n      } else {\n        this.setState({\n          activeTab: event\n        });\n      }\n    };\n\n    this.handleOrderCart = async () => {\n      const order = {\n        order_items: [...this.state.cart.values()],\n        status: orderStatus.ORDERED\n      }; // Send order to be stored in database\n\n      try {\n        // Add given generated order id\n        const orderId = await Requests.addOrder(localStorage.getItem('sessionId'), order);\n        order['_id'] = orderId; // Inform staff of new customer order\n\n        this.socket.emit('customer_order', order); // Update order list, empty cart and navigate to order list\n\n        this.setState({\n          orderList: await this.getOrderList(),\n          cart: new Map(),\n          activeTab: tabs.ORDERS,\n          showCheckout: false\n        });\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    this.handlePayment = async () => {\n      Requests.closeOrder(localStorage.getItem('sessionId'));\n      this.socket.emit('customer_paying', localStorage.getItem('tableId'));\n      this.setState({\n        orderList: await this.getOrderList(),\n        showCompleteOrderWarning: false,\n        activeTab: tabs.PAYMENT\n      });\n    };\n\n    this.handleCloseOrder = () => {\n      this.setState({\n        showCompleteOrderWarning: true\n      });\n    };\n\n    this.handleCloseWarning = () => {\n      this.setState({\n        showCompleteOrderWarning: false\n      });\n    };\n\n    this.handleOpenNav = () => {\n      this.setState({\n        showOverlay: true\n      });\n    };\n\n    this.handleCloseNav = () => {\n      this.setState({\n        showOverlay: false\n      });\n    };\n\n    this.handleCallWaiter = async confirmedCallWaiter => {\n      let calling = this.state.callingWaiter;\n\n      if (calling || confirmedCallWaiter) {\n        // Toggle the calling waiter status\n        const session = await Requests.getSession(localStorage.getItem('sessionId'));\n        const tableId = session.table_id;\n        await Requests.toggleCallWaiter(tableId); // Inform waiting staff of toggled waiter\n\n        this.socket.emit('call_waiter', tableId, !calling);\n        this.setState({\n          callingWaiter: !calling,\n          showConfirmCallWaiter: false\n        });\n      } else {\n        // Open modal to make user confirm waiter call\n        this.setState({\n          showConfirmCallWaiter: true\n        });\n      }\n    };\n\n    this.closeConfirmCallWaiter = () => {\n      this.setState({\n        showConfirmCallWaiter: false\n      });\n    };\n\n    this.confirmOrderModal = () => React.createElement(Modal, {\n      show: this.state.showCompleteOrderWarning,\n      onHide: this.handleCloseWarning,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, \"Proceed to Payment\")), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, \"Confirm your orders and proceed to payment?\"), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"danger\",\n      onClick: this.handleCloseWarning,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      variant: \"success\",\n      onClick: this.handlePayment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, \"Proceed\")));\n\n    this.confirmWaiterModal = () => React.createElement(Modal, {\n      show: this.state.showConfirmCallWaiter,\n      onHide: this.closeConfirmCallWaiter,\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, \"Need Help?\")), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, \"Need assistance from one of our friendly waiting staff?\"), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"success\",\n      onClick: () => this.handleCallWaiter(true),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \"Call Waiter\")));\n\n    this.getActiveTab = () => {\n      const reservationProps = {\n        showLogin: this.showLogin\n      };\n      let result;\n\n      switch (this.state.activeTab) {\n        case tabs.ABOUT:\n          result = React.createElement(About, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 287\n            },\n            __self: this\n          });\n          break;\n\n        case tabs.ALL:\n          result = React.createElement(Menu, {\n            itemInCart: this.itemInCart,\n            updateCart: this.updateCart,\n            display: \"all\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 290\n            },\n            __self: this\n          });\n          break;\n\n        case tabs.ORDERS:\n          result = React.createElement(Orders, {\n            orderList: this.state.orderList,\n            handleCloseOrder: this.handleCloseOrder,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 296\n            },\n            __self: this\n          });\n          break;\n\n        case tabs.RESERVATION:\n          result = React.createElement(Reservation, Object.assign({}, reservationProps, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 301\n            },\n            __self: this\n          }));\n          break;\n\n        case tabs.PAYMENT:\n          result = React.createElement(Payment, {\n            orderList: this.state.orderList,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 304\n            },\n            __self: this\n          });\n          break;\n\n        case tabs.PROFILE:\n          result = React.createElement(Profile, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 307\n            },\n            __self: this\n          });\n          break;\n\n        default:\n          result = null;\n      }\n\n      return result;\n    };\n\n    this.state = {\n      loggedIn: false,\n      showOverlay: false,\n      showCheckout: false,\n      activeTab: tabs.ALL,\n      orderList: [],\n      cart: new Map(),\n      showLoginDialog: false,\n      showCompleteOrderWarning: false,\n      reservation: {},\n      callingWaiter: false,\n      showConfirmCallWaiter: false\n    };\n    this.socket = io.connect('http://127.0.0.1:5000/');\n  }\n\n  componentDidMount() {\n    this.getCurrentUser();\n    this.getOrderList().then(orderList => {\n      this.setState({\n        orderList: orderList\n      });\n    });\n    this.setupSockets();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, React.createElement(NavOverlay, {\n      tabs: tabs,\n      show: this.state.showOverlay,\n      onHide: this.handleCloseNav,\n      handleNavSelect: this.handleNavSelect,\n      activeTab: this.state.activeTab,\n      loggedIn: this.state.loggedIn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }), React.createElement(Checkout, {\n      cart: this.state.cart,\n      updateCart: this.updateCart,\n      handleOrderCart: this.handleOrderCart,\n      show: this.state.showCheckout,\n      onHide: this.handleCloseCart,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }), React.createElement(Navbar, {\n      variant: \"dark\",\n      bg: \"black\",\n      sticky: \"top\",\n      onSelect: tab => this.handleNavSelect(tab),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      className: \"mr-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      onClick: this.handleOpenNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      icon: faBars,\n      color: \"white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    })))), React.createElement(Nav, {\n      className: \"mr-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: tabs.ALL,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, React.createElement(Navbar.Brand, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, \"M\\xE9ja\")))), React.createElement(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      onClick: this.handleOpenCart,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      icon: faReceipt,\n      color: \"white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }), this.state.cart.size > 0 && React.createElement(Badge, {\n      pill: true,\n      variant: \"info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, this.state.cart.size))))), this.getActiveTab(), React.createElement(LoginDialog, {\n      show: this.state.showLoginDialog,\n      setSessionId: this.props.setSessionId,\n      onHide: () => this.setState({\n        showLoginDialog: false\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, React.createElement(\"df-messenger\", {\n      \"chat-icon\": \"https://storage.googleapis.com/cloudprod-apiai/2a5f33aa-cde9-41a2-afbf-bbceb099bd19_x.png\",\n      intent: \"WELCOME\",\n      \"chat-title\": \"Meja Bot\",\n      \"agent-id\": \"a11d8a36-5854-4b43-8306-a110222079a5\",\n      \"language-code\": \"en\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    })), React.createElement(Fab // className='callWaiterButton'\n    , {\n      mainButtonStyles: {\n        backgroundColor: this.state.callingWaiter ? '#27ae60' : '#918585',\n        zIndex: '100 !important'\n      },\n      icon: React.createElement(FontAwesomeIcon, {\n        icon: faConciergeBell,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377\n        },\n        __self: this\n      }),\n      onClick: () => this.handleCallWaiter(false),\n      position: {\n        bottom: 0,\n        left: 0\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }), this.confirmOrderModal(), this.confirmWaiterModal());\n  }\n\n}","map":{"version":3,"sources":["/Users/elhadinata/Desktop/20t1/COMP3900/submit/capstone-project-artemis/client/src/components/Dashboard.jsx"],"names":["Badge","Button","Modal","Nav","Navbar","faBars","faConciergeBell","faReceipt","About","Checkout","Fab","FontAwesomeIcon","LoginDialog","Menu","NavOverlay","Orders","Payment","Profile","React","Requests","Reservation","io","cartOps","ADD","DELETE","UPDATE","tabs","ALL","ABOUT","ORDERS","CHECKOUT","RESERVATION","PAYMENT","PROFILE","orderStatus","ORDERED","PROGRESS","COMPLETED","CANCELLED","Dashboard","Component","constructor","props","setupSockets","socket","emit","localStorage","getItem","on","console","log","setState","orderList","getOrderList","err","error","handleCallWaiter","getCurrentUser","sessionId","session","getSession","user","getUser","user_id","loggedIn","order_list","itemInCart","menuItem","state","cart","has","_id","updateCart","orderItem","operation","oldCart","newCart","Map","set","menu_item","delete","handleOpenCart","showCheckout","handleCloseCart","showLogin","showLoginDialog","handleNavSelect","event","logout","activeTab","handleOrderCart","order","order_items","values","status","orderId","addOrder","handlePayment","closeOrder","showCompleteOrderWarning","handleCloseOrder","handleCloseWarning","handleOpenNav","showOverlay","handleCloseNav","confirmedCallWaiter","calling","callingWaiter","tableId","table_id","toggleCallWaiter","showConfirmCallWaiter","closeConfirmCallWaiter","confirmOrderModal","confirmWaiterModal","getActiveTab","reservationProps","result","reservation","connect","componentDidMount","then","render","tab","size","setSessionId","backgroundColor","zIndex","bottom","left"],"mappings":";AAAA,OAAO,uBAAP;AACA,OAAO,gCAAP;AAEA,SAASA,KAAT,EAAgBC,MAAhB,EAAwBC,KAAxB,EAA+BC,GAA/B,EAAoCC,MAApC,QAAkD,iBAAlD;AACA,SAASC,MAAT,EAAiBC,eAAjB,EAAkCC,SAAlC,QAAmD,mCAAnD;AAEA,SAASC,KAAT,QAAsB,4BAAtB;AACA,SAASC,QAAT,QAAyB,kCAAzB;AACA,SAASC,GAAT,QAAoB,gBAApB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,WAAT,QAA4B,wCAA5B;AACA,SAASC,IAAT,QAAqB,0BAArB;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,SAASC,MAAT,QAAuB,6BAAvB;AACA,SAASC,OAAT,QAAwB,gCAAxB;AACA,SAASC,OAAT,QAAwB,gCAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,WAAT,QAA4B,wCAA5B;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,OAAO,MAAMC,OAAO,GAAG;AACnBC,EAAAA,GAAG,EAAE,KADc;AAEnBC,EAAAA,MAAM,EAAE,QAFW;AAGnBC,EAAAA,MAAM,EAAE;AAHW,CAAhB;AAMP,MAAMC,IAAI,GAAG;AACTC,EAAAA,GAAG,EAAE,KADI;AAETC,EAAAA,KAAK,EAAE,OAFE;AAGTC,EAAAA,MAAM,EAAE,QAHC;AAITC,EAAAA,QAAQ,EAAE,UAJD;AAKTC,EAAAA,WAAW,EAAE,aALJ;AAMTC,EAAAA,OAAO,EAAE,SANA;AAOTC,EAAAA,OAAO,EAAE;AAPA,CAAb;AAUA,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA,OAAO,EAAE,SADc;AAEvBC,EAAAA,QAAQ,EAAE,aAFa;AAGvBC,EAAAA,SAAS,EAAE,WAHY;AAIvBC,EAAAA,SAAS,EAAE;AAJY,CAApB;AAOP,OAAO,MAAMC,SAAN,SAAwBrB,KAAK,CAACsB,SAA9B,CAAwC;AAC3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA0BnBC,YA1BmB,GA0BJ,MAAM;AACjB,WAAKC,MAAL,CAAYC,IAAZ,CAAiB,eAAjB,EAAkCC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAlC;AAEA,WAAKH,MAAL,CAAYI,EAAZ,CAAe,cAAf,EAA+B,YAAY;AACvC;AACA,YAAI;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,eAAKC,QAAL,CAAc;AAAEC,YAAAA,SAAS,EAAE,MAAM,KAAKC,YAAL;AAAnB,WAAd;AACH,SAHD,CAGE,OAAOC,GAAP,EAAY;AACVL,UAAAA,OAAO,CAACM,KAAR,CAAcD,GAAd;AACH;AACJ,OARD;AAUA,WAAKV,MAAL,CAAYI,EAAZ,CAAe,mBAAf,EAAoC,MAAM;AACtC,aAAKQ,gBAAL,CAAsB,KAAtB;AACH,OAFD;AAGH,KA1CkB;;AAAA,SA4CnBC,cA5CmB,GA4CF,YAAY;AACzB,YAAMC,SAAS,GAAGZ,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAlB;AACA,YAAMY,OAAO,GAAG,MAAMxC,QAAQ,CAACyC,UAAT,CAAoBF,SAApB,CAAtB;AACA,YAAMG,IAAI,GAAG,MAAM1C,QAAQ,CAAC2C,OAAT,CAAiBH,OAAO,CAACI,OAAzB,CAAnB;;AACA,UAAIF,IAAJ,EAAU;AACNZ,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,aAAKC,QAAL,CAAc;AACVa,UAAAA,QAAQ,EAAE;AADA,SAAd;AAGA;AACH;AAEJ,KAxDkB;;AAAA,SA0DnBX,YA1DmB,GA0DJ,YAAY;AACvB,YAAMK,SAAS,GAAGZ,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAlB;;AACA,UAAI,CAACW,SAAL,EAAgB;AACZ,eAAO,EAAP;AACH;;AACD,YAAMC,OAAO,GAAG,MAAMxC,QAAQ,CAACyC,UAAT,CAAoBd,YAAY,CAACC,OAAb,CAAqB,WAArB,CAApB,CAAtB;AACA,aAAOY,OAAO,GAAGA,OAAO,CAACM,UAAX,GAAwB,EAAtC;AACH,KAjEkB;;AAAA,SAoEnBC,UApEmB,GAoELC,QAAD,IAAc;AACvB,aAAO,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,GAAhB,CAAoBH,QAAQ,CAACI,GAA7B,CAAP;AACH,KAtEkB;;AAAA,SAwEnBC,UAxEmB,GAwEN,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACnC,UAAIC,OAAO,GAAG,KAAKP,KAAL,CAAWC,IAAzB;AACA,UAAIO,OAAO,GAAG,IAAIC,GAAJ,CAAQF,OAAR,CAAd;;AAEA,cAAQD,SAAR;AACI,aAAKpD,OAAO,CAACC,GAAR,IAAeD,OAAO,CAACG,MAA5B;AACImD,UAAAA,OAAO,CAACE,GAAR,CAAYL,SAAS,CAACM,SAAV,CAAoBR,GAAhC,EAAqCE,SAArC;AACA;;AAEJ,aAAKnD,OAAO,CAACE,MAAb;AACIoD,UAAAA,OAAO,CAACI,MAAR,CAAeP,SAAS,CAACM,SAAV,CAAoBR,GAAnC;AACA;;AACJ;AACI;AATR;;AAYA,WAAKpB,QAAL,CAAc;AAAEkB,QAAAA,IAAI,EAAEO;AAAR,OAAd;AACH,KAzFkB;;AAAA,SA4FnBK,cA5FmB,GA4FF,MAAM;AACnB,WAAK9B,QAAL,CAAc;AAAE+B,QAAAA,YAAY,EAAE;AAAhB,OAAd;AACH,KA9FkB;;AAAA,SAiGnBC,eAjGmB,GAiGD,MAAM;AACpB,WAAKhC,QAAL,CAAc;AAAE+B,QAAAA,YAAY,EAAE;AAAhB,OAAd;AACH,KAnGkB;;AAAA,SAsGnBE,SAtGmB,GAsGP,MAAM;AACd,WAAKjC,QAAL,CAAc;AAAEkC,QAAAA,eAAe,EAAE;AAAnB,OAAd;AACH,KAxGkB;;AAAA,SA2GnBC,eA3GmB,GA2GAC,KAAD,IAAW;AACzB,UAAIA,KAAK,KAAK,QAAd,EAAwB;AACpBpE,QAAAA,QAAQ,CAACqE,MAAT,CAAgB1C,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAhB;AACH,OAFD,MAEO;AACH,aAAKI,QAAL,CAAc;AAAEsC,UAAAA,SAAS,EAAEF;AAAb,SAAd;AACH;AACJ,KAjHkB;;AAAA,SAmHnBG,eAnHmB,GAmHD,YAAY;AAC1B,YAAMC,KAAK,GAAG;AACVC,QAAAA,WAAW,EAAE,CAAC,GAAG,KAAKxB,KAAL,CAAWC,IAAX,CAAgBwB,MAAhB,EAAJ,CADH;AAEVC,QAAAA,MAAM,EAAE5D,WAAW,CAACC;AAFV,OAAd,CAD0B,CAM1B;;AACA,UAAI;AACA;AACA,cAAM4D,OAAO,GAAG,MAAM5E,QAAQ,CAAC6E,QAAT,CAAkBlD,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAlB,EAAqD4C,KAArD,CAAtB;AACAA,QAAAA,KAAK,CAAC,KAAD,CAAL,GAAeI,OAAf,CAHA,CAKA;;AACA,aAAKnD,MAAL,CAAYC,IAAZ,CAAiB,gBAAjB,EAAmC8C,KAAnC,EANA,CAQA;;AACA,aAAKxC,QAAL,CAAc;AACVC,UAAAA,SAAS,EAAE,MAAM,KAAKC,YAAL,EADP;AAEVgB,UAAAA,IAAI,EAAE,IAAIQ,GAAJ,EAFI;AAGVY,UAAAA,SAAS,EAAE/D,IAAI,CAACG,MAHN;AAIVqD,UAAAA,YAAY,EAAE;AAJJ,SAAd;AAOH,OAhBD,CAgBE,OAAO5B,GAAP,EAAY;AACVL,QAAAA,OAAO,CAACM,KAAR,CAAcD,GAAd;AACH;AACJ,KA7IkB;;AAAA,SA+InB2C,aA/ImB,GA+IH,YAAY;AACxB9E,MAAAA,QAAQ,CAAC+E,UAAT,CAAoBpD,YAAY,CAACC,OAAb,CAAqB,WAArB,CAApB;AAEA,WAAKH,MAAL,CAAYC,IAAZ,CAAiB,iBAAjB,EAAoCC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAApC;AAEA,WAAKI,QAAL,CAAc;AACVC,QAAAA,SAAS,EAAE,MAAM,KAAKC,YAAL,EADP;AAEV8C,QAAAA,wBAAwB,EAAE,KAFhB;AAGVV,QAAAA,SAAS,EAAE/D,IAAI,CAACM;AAHN,OAAd;AAKH,KAzJkB;;AAAA,SA2JnBoE,gBA3JmB,GA2JA,MAAM;AACrB,WAAKjD,QAAL,CAAc;AAAEgD,QAAAA,wBAAwB,EAAE;AAA5B,OAAd;AACH,KA7JkB;;AAAA,SAgKnBE,kBAhKmB,GAgKE,MAAM;AACvB,WAAKlD,QAAL,CAAc;AAAEgD,QAAAA,wBAAwB,EAAE;AAA5B,OAAd;AACH,KAlKkB;;AAAA,SAqKnBG,aArKmB,GAqKH,MAAM;AAClB,WAAKnD,QAAL,CAAc;AAAEoD,QAAAA,WAAW,EAAE;AAAf,OAAd;AACH,KAvKkB;;AAAA,SA0KnBC,cA1KmB,GA0KF,MAAM;AACnB,WAAKrD,QAAL,CAAc;AAAEoD,QAAAA,WAAW,EAAE;AAAf,OAAd;AACH,KA5KkB;;AAAA,SA8KnB/C,gBA9KmB,GA8KA,MAAOiD,mBAAP,IAA+B;AAC9C,UAAIC,OAAO,GAAG,KAAKtC,KAAL,CAAWuC,aAAzB;;AACA,UAAID,OAAO,IAAID,mBAAf,EAAoC;AAChC;AACA,cAAM9C,OAAO,GAAG,MAAMxC,QAAQ,CAACyC,UAAT,CAAoBd,YAAY,CAACC,OAAb,CAAqB,WAArB,CAApB,CAAtB;AACA,cAAM6D,OAAO,GAAGjD,OAAO,CAACkD,QAAxB;AACA,cAAM1F,QAAQ,CAAC2F,gBAAT,CAA0BF,OAA1B,CAAN,CAJgC,CAMhC;;AACA,aAAKhE,MAAL,CAAYC,IAAZ,CAAiB,aAAjB,EAAgC+D,OAAhC,EAAyC,CAACF,OAA1C;AACA,aAAKvD,QAAL,CAAc;AAAEwD,UAAAA,aAAa,EAAE,CAACD,OAAlB;AAA2BK,UAAAA,qBAAqB,EAAE;AAAlD,SAAd;AACH,OATD,MASO;AACH;AACA,aAAK5D,QAAL,CAAc;AAAE4D,UAAAA,qBAAqB,EAAE;AAAzB,SAAd;AACH;AACJ,KA7LkB;;AAAA,SA+LnBC,sBA/LmB,GA+LM,MAAM;AAC3B,WAAK7D,QAAL,CAAc;AAAE4D,QAAAA,qBAAqB,EAAE;AAAzB,OAAd;AACH,KAjMkB;;AAAA,SAmMnBE,iBAnMmB,GAmMC,MAChB,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAE,KAAK7C,KAAL,CAAW+B,wBAAxB;AAAkD,MAAA,MAAM,EAAE,KAAKE,kBAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD,CAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,CADJ,EAII,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAJJ,EAOI,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,QAAhB;AAAyB,MAAA,OAAO,EAAE,KAAKA,kBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAII,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAA0B,MAAA,OAAO,EAAE,KAAKJ,aAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJJ,CAPJ,CApMe;;AAAA,SAsNnBiB,kBAtNmB,GAsNE,MACjB,oBAAC,KAAD;AACI,MAAA,IAAI,EAAE,KAAK9C,KAAL,CAAW2C,qBADrB;AAEI,MAAA,MAAM,EAAE,KAAKC,sBAFjB;AAGI,MAAA,QAAQ,MAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKI,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD,CAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CALJ,EAQI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEARJ,EAWI,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAA0B,MAAA,OAAO,EAAE,MAAM,KAAKxD,gBAAL,CAAsB,IAAtB,CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,CAXJ,CAvNe;;AAAA,SA0OnB2D,YA1OmB,GA0OJ,MAAM;AACjB,YAAMC,gBAAgB,GAAG;AACrBhC,QAAAA,SAAS,EAAE,KAAKA;AADK,OAAzB;AAGA,UAAIiC,MAAJ;;AACA,cAAQ,KAAKjD,KAAL,CAAWqB,SAAnB;AACI,aAAK/D,IAAI,CAACE,KAAV;AACIyF,UAAAA,MAAM,GAAI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAV;AACA;;AACJ,aAAK3F,IAAI,CAACC,GAAV;AACI0F,UAAAA,MAAM,GAAI,oBAAC,IAAD;AACE,YAAA,UAAU,EAAE,KAAKnD,UADnB;AAEE,YAAA,UAAU,EAAE,KAAKM,UAFnB;AAGE,YAAA,OAAO,EAAC,KAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAV;AAIA;;AACJ,aAAK9C,IAAI,CAACG,MAAV;AACIwF,UAAAA,MAAM,GAAG,oBAAC,MAAD;AACG,YAAA,SAAS,EAAE,KAAKjD,KAAL,CAAWhB,SADzB;AAEG,YAAA,gBAAgB,EAAE,KAAKgD,gBAF1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAT;AAGA;;AACJ,aAAK1E,IAAI,CAACK,WAAV;AACIsF,UAAAA,MAAM,GAAI,oBAAC,WAAD,oBAAiBD,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAV;AACA;;AACJ,aAAK1F,IAAI,CAACM,OAAV;AACIqF,UAAAA,MAAM,GAAI,oBAAC,OAAD;AAAS,YAAA,SAAS,EAAE,KAAKjD,KAAL,CAAWhB,SAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAV;AACA;;AACJ,aAAK1B,IAAI,CAACO,OAAV;AACIoF,UAAAA,MAAM,GAAI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAV;AACA;;AACJ;AACIA,UAAAA,MAAM,GAAG,IAAT;AAzBR;;AA6BA,aAAOA,MAAP;AACH,KA7QkB;;AAEf,SAAKjD,KAAL,GAAa;AACTJ,MAAAA,QAAQ,EAAE,KADD;AAETuC,MAAAA,WAAW,EAAE,KAFJ;AAGTrB,MAAAA,YAAY,EAAE,KAHL;AAITO,MAAAA,SAAS,EAAE/D,IAAI,CAACC,GAJP;AAKTyB,MAAAA,SAAS,EAAE,EALF;AAMTiB,MAAAA,IAAI,EAAE,IAAIQ,GAAJ,EANG;AAOTQ,MAAAA,eAAe,EAAE,KAPR;AAQTc,MAAAA,wBAAwB,EAAE,KARjB;AASTmB,MAAAA,WAAW,EAAE,EATJ;AAUTX,MAAAA,aAAa,EAAE,KAVN;AAWTI,MAAAA,qBAAqB,EAAE;AAXd,KAAb;AAaA,SAAKnE,MAAL,GAAcvB,EAAE,CAACkG,OAAH,CAAW,wBAAX,CAAd;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAK/D,cAAL;AACA,SAAKJ,YAAL,GAAoBoE,IAApB,CAAyBrE,SAAS,IAAI;AAClC,WAAKD,QAAL,CAAc;AAAEC,QAAAA,SAAS,EAAEA;AAAb,OAAd;AACH,KAFD;AAGA,SAAKT,YAAL;AACH;;AAuPD+E,EAAAA,MAAM,GAAG;AAEL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAEhG,IAAlB;AAAwB,MAAA,IAAI,EAAE,KAAK0C,KAAL,CAAWmC,WAAzC;AAAsD,MAAA,MAAM,EAAE,KAAKC,cAAnE;AAAmF,MAAA,eAAe,EAAE,KAAKlB,eAAzG;AAA0H,MAAA,SAAS,EAAE,KAAKlB,KAAL,CAAWqB,SAAhJ;AAA2J,MAAA,QAAQ,EAAE,KAAKrB,KAAL,CAAWJ,QAAhL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,QAAD;AACI,MAAA,IAAI,EAAE,KAAKI,KAAL,CAAWC,IADrB;AAEI,MAAA,UAAU,EAAE,KAAKG,UAFrB;AAGI,MAAA,eAAe,EAAE,KAAKkB,eAH1B;AAII,MAAA,IAAI,EAAE,KAAKtB,KAAL,CAAWc,YAJrB;AAKI,MAAA,MAAM,EAAE,KAAKC,eALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAUI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,MAAhB;AAAuB,MAAA,EAAE,EAAC,OAA1B;AAAkC,MAAA,MAAM,EAAC,KAAzC;AAA+C,MAAA,QAAQ,EAAGwC,GAAG,IAAI,KAAKrC,eAAL,CAAqBqC,GAArB,CAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD,CAAK,IAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,OAAO,EAAE,KAAKrB,aAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAuC,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAEjG,MAAvB;AAA+B,MAAA,KAAK,EAAC,OAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAvC,CADJ,CADJ,CADJ,EAMI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD,CAAK,IAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAEqB,IAAI,CAACC,GAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8B,oBAAC,MAAD,CAAQ,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAA9B,CADJ,CADJ,CANJ,EAWI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD,CAAK,IAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,OAAO,EAAE,KAAKsD,cAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE1E,SAAvB;AAAkC,MAAA,KAAK,EAAC,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEnB,KAAK6D,KAAL,CAAWC,IAAX,CAAgBuD,IAAhB,GAAuB,CAAvB,IAA4B,oBAAC,KAAD;AAAO,MAAA,IAAI,MAAX;AAAY,MAAA,OAAO,EAAC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4B,KAAKxD,KAAL,CAAWC,IAAX,CAAgBuD,IAA5C,CAFT,CADJ,CADJ,CAXJ,CAVJ,EAgCK,KAAKT,YAAL,EAhCL,EAkCI,oBAAC,WAAD;AAAa,MAAA,IAAI,EAAE,KAAK/C,KAAL,CAAWiB,eAA9B;AACI,MAAA,YAAY,EAAE,KAAK3C,KAAL,CAAWmF,YAD7B;AAEI,MAAA,MAAM,EAAE,MAAM,KAAK1E,QAAL,CAAc;AAAEkC,QAAAA,eAAe,EAAE;AAAnB,OAAd,CAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlCJ,EAwCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,mBAAU,2FADd;AAEI,MAAA,MAAM,EAAC,SAFX;AAGI,oBAAW,UAHf;AAII,kBAAS,sCAJb;AAKI,uBAAc,IALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAxCJ,EAmDI,oBAAC,GAAD,CACI;AADJ;AAEI,MAAA,gBAAgB,EAAE;AACdyC,QAAAA,eAAe,EAAE,KAAK1D,KAAL,CAAWuC,aAAX,GAA2B,SAA3B,GAAsC,SADzC;AAEdoB,QAAAA,MAAM,EAAE;AAFM,OAFtB;AAMI,MAAA,IAAI,EAAE,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAEzH,eAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANV;AAOI,MAAA,OAAO,EAAE,MAAM,KAAKkD,gBAAL,CAAsB,KAAtB,CAPnB;AAQI,MAAA,QAAQ,EAAE;AAACwE,QAAAA,MAAM,EAAE,CAAT;AAAYC,QAAAA,IAAI,EAAE;AAAlB,OARd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnDJ,EA8DK,KAAKhB,iBAAL,EA9DL,EA+DK,KAAKC,kBAAL,EA/DL,CADJ;AAoEH;;AAtV0C","sourcesContent":["import 'src/styles/styles.css';\nimport 'react-tiny-fab/dist/styles.css';\n\nimport { Badge, Button, Modal, Nav, Navbar } from 'react-bootstrap';\nimport { faBars, faConciergeBell, faReceipt } from '@fortawesome/free-solid-svg-icons'\n\nimport { About } from 'src/components/about/About';\nimport { Checkout } from 'src/components/checkout/Checkout';\nimport { Fab } from 'react-tiny-fab';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { LoginDialog } from 'src/components/reservation/LoginDialog';\nimport { Menu } from 'src/components/menu/Menu';\nimport { NavOverlay } from 'src/components/NavOverlay';\nimport { Orders } from 'src/components/order/Orders';\nimport { Payment } from 'src/components/payment/Payment';\nimport { Profile } from 'src/components/profile/Profile';\nimport React from 'react';\nimport { Requests } from 'src/utilities/Requests';\nimport { Reservation } from 'src/components/reservation/Reservation';\nimport io from 'socket.io-client';\n\nexport const cartOps = {\n    ADD: 'add',\n    DELETE: 'delete',\n    UPDATE: 'update'\n}\n\nconst tabs = {\n    ALL: 'all',\n    ABOUT: 'about',\n    ORDERS: 'orders',\n    CHECKOUT: 'checkout',\n    RESERVATION: 'reservation',\n    PAYMENT: 'payment',\n    PROFILE: 'profile'\n}\n\nexport const orderStatus = {\n    ORDERED: 'Ordered',\n    PROGRESS: 'In Progress',\n    COMPLETED: 'Completed',\n    CANCELLED: 'Cancelled'\n}\n\nexport class Dashboard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loggedIn: false,\n            showOverlay: false,\n            showCheckout: false,\n            activeTab: tabs.ALL,\n            orderList: [],\n            cart: new Map(),\n            showLoginDialog: false,\n            showCompleteOrderWarning: false,\n            reservation: {},\n            callingWaiter: false,\n            showConfirmCallWaiter: false\n        };\n        this.socket = io.connect('http://127.0.0.1:5000/');\n    }\n\n    componentDidMount() {\n        this.getCurrentUser();\n        this.getOrderList().then(orderList => {\n            this.setState({ orderList: orderList })\n        });\n        this.setupSockets();\n    }\n\n    setupSockets = () => {\n        this.socket.emit('customer_join', localStorage.getItem('tableId'));\n\n        this.socket.on('updateOrders', async () => {\n            // Update the status of the order that has been changed\n            try {\n                console.log('Order has been updated');\n                this.setState({ orderList: await this.getOrderList() });\n            } catch (err) {\n                console.error(err);\n            }\n        });\n\n        this.socket.on('callWaiterToggled', () => {\n            this.handleCallWaiter(false);\n        })\n    }\n\n    getCurrentUser = async () => {\n        const sessionId = localStorage.getItem('sessionId');\n        const session = await Requests.getSession(sessionId);\n        const user = await Requests.getUser(session.user_id);\n        if (user) {\n            console.log('USER logged in');\n            this.setState({ \n                loggedIn: true\n            });\n            return;\n        }\n        \n    }\n\n    getOrderList = async () => {\n        const sessionId = localStorage.getItem('sessionId');\n        if (!sessionId) {\n            return [];\n        }\n        const session = await Requests.getSession(localStorage.getItem('sessionId'));\n        return session ? session.order_list : [];\n    }\n\n    // #region Cart Operations\n    itemInCart = (menuItem) => {\n        return this.state.cart.has(menuItem._id);\n    }\n\n    updateCart = (orderItem, operation) => {\n        let oldCart = this.state.cart;\n        let newCart = new Map(oldCart);\n\n        switch (operation) {\n            case cartOps.ADD || cartOps.UPDATE:\n                newCart.set(orderItem.menu_item._id, orderItem);\n                break;\n\n            case cartOps.DELETE:\n                newCart.delete(orderItem.menu_item._id);\n                break;\n            default:\n                break;\n        }\n\n        this.setState({ cart: newCart });\n    }\n\n    /* Open when someone clicks on the span element */\n    handleOpenCart = () => {\n        this.setState({ showCheckout: true });\n    }\n\n    /* Close when someone clicks on the \"x\" symbol inside the overlay */\n    handleCloseCart = () => {\n        this.setState({ showCheckout: false });\n    }\n    // #endregion\n\n    showLogin = () => {\n        this.setState({ showLoginDialog: true });\n    }\n\n    // #region Event Handlers\n    handleNavSelect = (event) => {\n        if (event === 'logout') {\n            Requests.logout(localStorage.getItem('sessionId'));\n        } else {\n            this.setState({ activeTab: event });\n        }\n    }\n\n    handleOrderCart = async () => {\n        const order = {\n            order_items: [...this.state.cart.values()],\n            status: orderStatus.ORDERED\n        }\n\n        // Send order to be stored in database\n        try {\n            // Add given generated order id\n            const orderId = await Requests.addOrder(localStorage.getItem('sessionId'), order);\n            order['_id'] = orderId;\n\n            // Inform staff of new customer order\n            this.socket.emit('customer_order', order);\n\n            // Update order list, empty cart and navigate to order list\n            this.setState({\n                orderList: await this.getOrderList(),\n                cart: new Map(),\n                activeTab: tabs.ORDERS,\n                showCheckout: false,\n            });\n\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    handlePayment = async () => {\n        Requests.closeOrder(localStorage.getItem('sessionId'));\n\n        this.socket.emit('customer_paying', localStorage.getItem('tableId'))\n\n        this.setState({ \n            orderList: await this.getOrderList(),\n            showCompleteOrderWarning: false,\n            activeTab: tabs.PAYMENT \n        });\n    }\n\n    handleCloseOrder = () => {\n        this.setState({ showCompleteOrderWarning: true });\n    }\n    // #endregion\n\n    handleCloseWarning = () => {\n        this.setState({ showCompleteOrderWarning: false });\n    }\n    \n    /* Open when someone clicks on the span element */\n    handleOpenNav = () => {\n        this.setState({ showOverlay: true });\n    }\n\n    /* Close when someone clicks on the \"x\" symbol inside the overlay */\n    handleCloseNav = () => {\n        this.setState({ showOverlay: false });\n    }\n\n    handleCallWaiter = async (confirmedCallWaiter) => {\n        let calling = this.state.callingWaiter;\n        if (calling || confirmedCallWaiter) {\n            // Toggle the calling waiter status\n            const session = await Requests.getSession(localStorage.getItem('sessionId'));\n            const tableId = session.table_id;\n            await Requests.toggleCallWaiter(tableId);\n\n            // Inform waiting staff of toggled waiter\n            this.socket.emit('call_waiter', tableId, !calling);\n            this.setState({ callingWaiter: !calling, showConfirmCallWaiter: false });\n        } else {\n            // Open modal to make user confirm waiter call\n            this.setState({ showConfirmCallWaiter: true });\n        }\n    }\n\n    closeConfirmCallWaiter = () => {\n        this.setState({ showConfirmCallWaiter: false });\n    }\n\n    confirmOrderModal = () => (\n        <Modal show={this.state.showCompleteOrderWarning} onHide={this.handleCloseWarning}>\n            <Modal.Header>\n                <Modal.Title>Proceed to Payment</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                Confirm your orders and proceed to payment?\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"danger\" onClick={this.handleCloseWarning}>\n                    Cancel\n                </Button>\n                <Button variant=\"success\" onClick={this.handlePayment}>\n                    Proceed\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n\n    confirmWaiterModal = () => (\n        <Modal \n            show={this.state.showConfirmCallWaiter} \n            onHide={this.closeConfirmCallWaiter}\n            centered\n        >\n            <Modal.Header>\n                <Modal.Title>Need Help?</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                Need assistance from one of our friendly waiting staff?\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"success\" onClick={() => this.handleCallWaiter(true)}>\n                    Call Waiter\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n\n    getActiveTab = () => {\n        const reservationProps = {\n            showLogin: this.showLogin,\n        }\n        let result;\n        switch (this.state.activeTab) {\n            case tabs.ABOUT:\n                result = (<About/>);\n                break;\n            case tabs.ALL:\n                result = (<Menu\n                            itemInCart={this.itemInCart}\n                            updateCart={this.updateCart}\n                            display=\"all\"/>);\n                break;\n            case tabs.ORDERS:\n                result = <Orders\n                            orderList={this.state.orderList}\n                            handleCloseOrder={this.handleCloseOrder}/>\n                break;\n            case tabs.RESERVATION:\n                result = (<Reservation {...reservationProps}/>);\n                break;\n            case tabs.PAYMENT:\n                result = (<Payment orderList={this.state.orderList}/>);\n                break;\n            case tabs.PROFILE:\n                result = (<Profile/>);\n                break;\n            default:\n                result = null;\n            \n        }\n\n        return result;\n    }\n\n    render() {\n        \n        return (\n            <div>\n                <NavOverlay tabs={tabs} show={this.state.showOverlay} onHide={this.handleCloseNav} handleNavSelect={this.handleNavSelect} activeTab={this.state.activeTab} loggedIn={this.state.loggedIn} />\n                <Checkout\n                    cart={this.state.cart}\n                    updateCart={this.updateCart}\n                    handleOrderCart={this.handleOrderCart}\n                    show={this.state.showCheckout}\n                    onHide={this.handleCloseCart}\n\n                />\n                <Navbar variant=\"dark\" bg=\"black\" sticky=\"top\" onSelect={(tab => this.handleNavSelect(tab))}>\n                    <Nav className=\"mr-auto\">\n                        <Nav.Item>\n                            <Nav.Link onClick={this.handleOpenNav}><FontAwesomeIcon icon={faBars} color=\"white\" /></Nav.Link>\n                        </Nav.Item>\n                    </Nav>\n                    <Nav className=\"mr-auto\">\n                        <Nav.Item>\n                            <Nav.Link eventKey={tabs.ALL}><Navbar.Brand>Méja</Navbar.Brand></Nav.Link>\n                        </Nav.Item>\n                    </Nav>\n                    <Nav>\n                        <Nav.Item>\n                            <Nav.Link onClick={this.handleOpenCart}>\n                                <FontAwesomeIcon icon={faReceipt} color=\"white\" />\n        {this.state.cart.size > 0 && <Badge pill variant=\"info\">{this.state.cart.size}</Badge>}\n                            </Nav.Link>\n                        </Nav.Item>\n                    </Nav>\n                </Navbar>\n\n                \n                {this.getActiveTab()}\n\n                <LoginDialog show={this.state.showLoginDialog}\n                    setSessionId={this.props.setSessionId}\n                    onHide={() => this.setState({ showLoginDialog: false })} />\n\n                \n                {/* Chatbot */}\n                <div>\n                    <df-messenger\n                        chat-icon=\"https://storage.googleapis.com/cloudprod-apiai/2a5f33aa-cde9-41a2-afbf-bbceb099bd19_x.png\"\n                        intent=\"WELCOME\"\n                        chat-title=\"Meja Bot\"\n                        agent-id=\"a11d8a36-5854-4b43-8306-a110222079a5\"\n                        language-code=\"en\"\n                    ></df-messenger>\n                </div>\n\n                {/* Call Waiter Button */}\n                <Fab\n                    // className='callWaiterButton'\n                    mainButtonStyles={{\n                        backgroundColor: this.state.callingWaiter ? '#27ae60': '#918585',\n                        zIndex: '100 !important'\n                    }}\n                    icon={<FontAwesomeIcon icon={faConciergeBell} />}\n                    onClick={() => this.handleCallWaiter(false)}\n                    position={{bottom: 0, left: 0}}\n                />\n                \n                {this.confirmOrderModal()}\n                {this.confirmWaiterModal()}\n            </div>\n\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}